C# ভাষায় array হলো একধরনের ডেটা স্ট্রাকচার যা একই ধরনের ডেটা (যেমন সংখ্যার মান, স্ট্রিং ইত্যাদি) একসাথে সংরক্ষণ করতে ব্যবহৃত হয়। এটি স্থির-আকারের (fixed-size) এবং ইনডেক্স ব্যবহার করে ডেটা অ্যাক্সেস করা হয়।

C# এ Array এর বৈশিষ্ট্য
স্থির আকার: একবার ডিক্লেয়ার করলে এর সাইজ পরিবর্তন করা যায় না।

ডেটা টাইপ নির্দিষ্ট: একধরনের ডেটা টাইপ রাখতে হয় (যেমন, সব ইন্টিজার বা সব স্ট্রিং)।

ইনডেক্সিং শুরু হয় 0 থেকে: প্রথম উপাদানের ইনডেক্স 0, দ্বিতীয়টি 1 ইত্যাদি।

Array ডিক্লেয়ার এবং ইনিশিয়ালাইজ করা
১. ডিক্লেয়ার করা
csharp
int[] numbers; // একটি ইন্টিজার অ্যারে ডিক্লেয়ার করা হলো।
২. ইনিশিয়ালাইজ করা
csharp
numbers = new int[5]; // এখানে অ্যারেটির সাইজ ৫ সেট করা হয়েছে।
৩. ডিক্লেয়ার ও ইনিশিয়ালাইজ একসাথে
csharp
int[] numbers = new int[5]; // এটি একটি array declaration with size। এখানে অ্যারের আকার নির্ধারণ করা হচ্ছে কিন্তু তার মধ্যে কোনো মান (values) সরাসরি নির্ধারণ করা হয়নি।
এখন, myArray অ্যারে হবে:

myArray[0] = 0
myArray[1] = 0
myArray[2] = 0
myArray[3] = 0
৪. মান সেট করা
csharp
numbers[0] = 10; // প্রথম উপাদান 10
numbers[1] = 20; // দ্বিতীয় উপাদান 20
৫. মান অ্যারে তৈরির সময় নির্ধারণ করা
csharp
int[] numbers = {10, 20, 30, 40, 50};

উদাহরণ: অ্যারে থেকে মান প্রিন্ট করা
csharp
using System;

class Program
{
    static void Main()
    {
        int[] numbers = { 10, 20, 30, 40, 50 };

        for (int i = 0; i < numbers.Length; i++)
        {
            Console.WriteLine($"Index {i}: {numbers[i]}");
        }
    }
}
আউটপুট:
Index 0: 10
Index 1: 20
Index 2: 30
Index 3: 40
Index 4: 50
Array এর গুরুত্বপূর্ণ বৈশিষ্ট্য
Length: অ্যারেতে কতটি উপাদান আছে তা জানার জন্য ব্যবহৃত হয়।

csharp
Console.WriteLine(numbers.Length); // আউটপুট: 5
মাল্টি-ডাইমেনশনাল (Multi-dimensional) Array
C# এ ২ বা তার বেশি ডাইমেনশনের অ্যারে তৈরি করা যায়।

২-ডাইমেনশনের অ্যারে
csharp
int[,] matrix = {
    {1, 2, 3},
    {4, 5, 6},
    {7, 8, 9}
};
Console.WriteLine(matrix[1, 2]); // আউটপুট: 6
জগড (Jagged) Array
এটি এমন একটি অ্যারে যেখানে প্রতিটি উপাদান আরেকটি অ্যারে হতে পারে।


Array.Sort(myArray);
Array.Sort(): স্ট্রিং অ্যারেটিকে A to Z অর্ডারে সাজিয়ে দেয় (Alphabetical Order)।
Array.Reverse(myArray);
Array.Reverse(): Sort করার পর স্ট্রিং অ্যারেটিকে Z to A সাজিয়ে দেয়।


==>মিশ্র ডেটা টাইপ (Multiple Data Type)

object[] mixedArray = new object[4];
object[]: object টাইপের অ্যারে যে কোনো ধরনের ডেটা সংরক্ষণ করতে পারে।
new object[4]: অ্যারেটির আকার ৪ নির্ধারণ করা হয়েছে।


mixedArray[0] = 10;
mixedArray[1] = "Zannat";
mixedArray[2] = true;
mixedArray[3] = DateTime.Now;
mixedArray[0] = 10;: প্রথম উপাদানে 10 (ইন্টিজার) রাখা হয়েছে।
mixedArray[1] = "Zannat";: দ্বিতীয় উপাদানে "Zannat" (স্ট্রিং) রাখা হয়েছে।
mixedArray[2] = true;: তৃতীয় উপাদানে true (বুলিয়ান) রাখা হয়েছে।
mixedArray[3] = DateTime.Now;: চতুর্থ উপাদানে বর্তমান তারিখ ও সময় রাখা হয়েছে।

csharp
int[][] jaggedArray = new int[3][];
jaggedArray[0] = new int[] {1, 2};
jaggedArray[1] = new int[] {3, 4, 5};
jaggedArray[2] = new int[] {6};
Console.WriteLine(jaggedArray[1][2]); // আউটপুট: 5
ব্যবহার
ডেটা সংরক্ষণ এবং পরিচালনা করা সহজ।

সারি-কলামের ডেটা সংরক্ষণ।

লুপের মাধ্যমে দ্রুত প্রসেসিং।



Array Copy:
Reference শেয়ার করে।
একটির মান পরিবর্তন করলে অন্যটিও পরিবর্তিত হয়।
int[] numbers = { 1, 2, 3, 4, 5 };
int[] numbersCopy = numbers;
এখানে numbersCopy নামের আরেকটি অ্যারে তৈরি করা হয়েছে।
এটি numbers অ্যারেটির reference ধরে রেখেছে। অর্থাৎ, numbers এবং numbersCopy উভয়ই একই মেমোরি স্থান (memory location) শেয়ার করছে।
numbersCopy[2] = 15;
numbersCopy[2] তে মান 15 সেট করা হয়েছে।
যেহেতু numbersCopy এবং numbers একই reference ধরে রাখছে, তাই numbers[2]-এর মানও পরিবর্তন হয়ে 15 হয়ে যায়।
Console.WriteLine("The Value For numbers variable are: " + numbers[2]);   // 15
Console.WriteLine("The Value For numbersCopy variable are: " + numbersCopy[2]);   // 15



Array Clone:
int[] numbers2 = { 1, 2, 3, 4, 5 };
int[] numbers2Clone = (int[])numbers2.Clone();
numbers2.Clone() মেথডটি ব্যবহার করে numbers2 এর একটি shallow copy তৈরি করা হয়েছে।নতুন অ্যারে তৈরি করে।
অর্থাৎ, numbers2Clone অ্যারেটি numbers2 এর একটি সম্পূর্ণ আলাদা কপি।
এখন numbers2 এবং numbers2Clone আলাদা মেমোরি অবস্থান (memory location) ধারণ করে।কটির মান পরিবর্তন করলে অন্যটির উপর প্রভাব পড়ে না।

numbers2[2] = 10;
খানে numbers2Clone[2] এর মান পরিবর্তন করে 15 করা হয়েছে।
এটি কেবলমাত্র numbers2Clone-এর মান পরিবর্তন করেছে, numbers2-এর নয়।
Console.WriteLine("The Value For numbers2 variable are: " + numbers2[2]);   // 10
Console.WriteLine("The Value For numbers2Clone variable are: " + numbers2Clone[2]);   // 15


এ
